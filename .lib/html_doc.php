<?php namespace schrimp;

class html_doc extends html
{
    static $todos = array
    (
        'get_head_links' => "all if () modifiers should call internal methods",
        'backend/frontend controller' => "it should load only right style.css..",
        'meta application-name' => "should be generated by homepage controller!",
        'meta keywords' => "automatic population based on content/siloing",
        'keywords native proofing' => "3 to 9 in deepest level, online g-planner",
    );

    static $tests = array();

    static function get_head_metatags()
    {
        parent::add_metatags(array
        (
            array
            (
                'charset' => "UTF-8",
            ),
            array
            (
                'name' => "author",
                'content' => STR_PROJECT_FULL,
            ),
            array
            (
                'name' => "robots",
                'content' => "noindex, nofollow",
            ),
            array
            (
                'name' => "viewport",
                'content' => "user-scalable=no, width=device-width",
            ),
        ));
    }

    private static function _add_compressed_scripts($list)
    {
        $result = '';
        foreach ($list as $href)
            $result .= file_get_contents($href);

        $content = toolbox_js::comprime($result);

        echo parent::add_js_script($content);

        return $content;
    }

    private static function _add_compressed_styles($list)
    {
        $result = '';
        foreach ($list as $href)
        {
            $path = str_replace(implode(array_slice(explode('/',
                                                            $href),
                                                    -2),
                                        '/'),
                                '',
                                $href);

            $result .= str_replace(array
                                   (
                                       "@CHARSET 'UTF-8';",
                                       "url('..",
                                   ),
                                   array
                                   (
                                       '',
                                       "url('" . $path,
                                   ),
                                   file_get_contents($href));
        }

        $content = toolbox::comprime($result);

        echo parent::_style($content) . parent::_HTML_HEAD_INDENTATION;

        return $content;
    }

    static function get_head_favicon()
    {
        $favicon_path = _SET_INCLUDES_PATH . "img/"
                      . main::$controller . "_favicon.ico";

        $favicon_publicpath = _SET_INCLUDES_PUBLICPATH . "img/"
                            . main::$controller . "_favicon.ico";

        if (fe($favicon_publicpath)) // precheck on file existance to permit fallback
            parent::add_favicon($favicon_publicpath);
        elseif (fe($favicon_path))
            parent::add_favicon($favicon_path);
        else
            parent::add_favicon(_SET_INCLUDES_PATH . "img/schrimp_favicon.ico"); // parent::add_stylesheet("http://fonts.googleapis.com/css?family=Amaranth:700");
    }

    static function get_head_links($fullpath,
                                   $list = array()) // SVG inline editing (php driven) if css + js != enough
    {
        $list[] = _SET_INCLUDES_PATH . "css/style.css";
        if (_SET_ADVANCED_INTERFACE)
            $list[] = _SET_INCLUDES_PATH . "css/advin.css";

        $list[] = _SET_INCLUDES_PUBLICPATH . "css/style.css"; // base style sheet for frontend
        if (_SET_RESPONSIVE_DESIGN)
            $list[] = _SET_INCLUDES_PUBLICPATH . "css/responsive.css"; // adds responsive media-queries based designs

        $list[] = $fullpath . ".css"; // this adds extra controller css

        if (_SET_DESIGN_MODE)
            $list[] = _SET_INCLUDES_PATH . "css/debug.css"; // overrides all css sheets, only if debug mode is active..

        if (_SET_CSS_COMPRESSION)
            return self::_add_compressed_styles($list);
        else
        {
            foreach ($list as $href)
                parent::add_stylesheet($href);

            return parent::$_linked_files;
        }
    }

    static function get_head_scripts($list = array())
    {
        //$list[] = _SET_INCLUDES_PATH . "js/angular.js"; // https://ajax.googleapis.com/ajax/libs/angularjs/1.0.8/angular.min.js

        $list[] = _SET_INCLUDES_PATH . "js/jquery.js";
        $list[] = _SET_INCLUDES_PATH . "js/jquery.NO-OLD-IE.js";

        //$list[] = _SET_INCLUDES_PATH . "js/jquery.ui.js"; // parent::add_js_file("//ajax.googleapis.com/ajax/libs/jqueryui/1.8.23/jquery-ui.min.js");
        //$list[] = _SET_INCLUDES_PATH . "js/jquery.jcarousel.js";
        //$list[] = _SET_INCLUDES_PATH . "js/jquery.gestures.js";
        //$list[] = _SET_INCLUDES_PATH . "js/jquery.jgestures.js";

        //$list[] = _SET_INCLUDES_PATH . "js/prototype.js";

        //$list[] = _SET_INCLUDES_PATH . "js/modernizr.js";

        //$list[] = _SET_INCLUDES_PATH . "js/jwplayer.js";
        //$list[] = _SET_INCLUDES_PATH . "js/jwplayer.html5.js"; // not really needed..

        $list[] = _SET_INCLUDES_PATH . "js/schrimp.js";
        if (_SET_ADVANCED_INTERFACE)
            $list[] = _SET_INCLUDES_PATH . "js/schrimp.advin.js";

        if (_SET_JS_COMPRESSION)
            return self::_add_compressed_scripts($list);
        else
        {
            foreach ($list as $href)
                parent::add_js_file($href);

            return parent::$_loaded_scripts;
        }
    }
}